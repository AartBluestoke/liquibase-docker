#!/bin/bash

set -e -o pipefail

TMPDIR=${TMPDIR:-/tmp}
db_root_dir="$PWD"

header() { printf '=%.0s' {1..79}; echo; echo $@; printf '=%.0s' {1..79}; echo; }

declare -a dbs=( "$@" )
if [[ $# == 0 ]]; then
  dbs=( */Dockerfile )
fi

header "Build base image - $db"
set -x
cd $db_root_dir/..
docker build --tag liquibase:test .
set +x

for db in "${dbs[@]}"; do
  
  db=${db%Dockerfile}
  db=${db%/}
  tag="$db-test"
  db_image_tag="liquibase:$tag"
  db_image_tmp="$TMPDIR/liquibase-$tag"
  db_container="liquibase-$tag"

  header "Copy and prepare docker - $db"
  set -x
  rm -rvf $db_image_tmp &>/dev/null || true
  cp -rv $db_root_dir/$db/ $db_image_tmp/
  cd $db_image_tmp
  sed -i "1s/.*/FROM liquibase:test/" Dockerfile
  docker rm -f $db_container 2>/dev/null || true
  set +x

  header "Build derived docker - $db"
  set -x
  docker build --tag $db_image_tag .
  set +x

  header "Start container - $db"
  set -x
  docker run --name $db_container -d $db_image_tag bash -c 'while [[ ! -e /lambda/test_done ]]; do sleep 1; done'
  docker logs $db_container
  set +x

  header "Run tests - $db"
  set -x
  docker cp test/ $db_container:/workspace/
  docker exec $db_container bash -c 'cd test; ./run_test; touch /workspace/test_done'
  set +x

  header "Cleanup - $db"
  set -x
  docker rmi -f $db_image_tag
  rm -rvf $db_image_tmp
  set +x

done

docker rmi -f liquibase:test

